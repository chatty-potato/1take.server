apply plugin: 'jacoco'

// jacoco version
jacoco {
    toolVersion = '0.8.12'
}

def UNIT_TEST = 'UnitTest'
def INTEGRATION_TEST = 'IntegrationTest'

// 검증 제외 패키지 및 클래스
def jacocoExcludes = [
        '**/*Application*'
]

// 테스트 레포트 생성
jacocoTestReport {
    reports {
        xml.required = false
        csv.required = false
        html.required = true
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: jacocoExcludes)
        }))
    }
}

// 테스트 커버리지 검증 설정
jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            element = 'CLASS'

            // Branch Coverage 60%
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.60
            }

            // Method Coverage 60%
            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 0.60
            }

            // Line Coverage 60%
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.60
            }

            // 검증 제외 패키지 및 클래스
            excludes = jacocoExcludes
        }
    }
}

// 전체 테스트
test {
    description = 'Run All tests'
    useJUnitPlatform()
}

// 단위 테스트
tasks.register('unitTest', Test) {
    group = 'verification'
    description = 'Run the unit test.'
    useJUnitPlatform {
        includeTags UNIT_TEST
        excludeTags INTEGRATION_TEST
    }
    jacoco {
        destinationFile = file("$buildDir/jacoco/test.exec")
    }
}

// 통합 테스트
tasks.register('integrationTest', Test) {
    group = 'verification'
    description = 'Run the integration test'
    useJUnitPlatform {
        includeTags INTEGRATION_TEST
        excludeTags UNIT_TEST
    }
    jacoco {
        destinationFile = file("$buildDir/jacoco/test.exec")
    }
}

// 전체 테스트 커버리지 검증
tasks.register('totalTestCoverage', Test) {
    group 'verification'
    description 'Runs the total tests with coverage'
    dependsOn(':test', ':jacocoTestReport', ':jacocoTestCoverageVerification')
    jacocoTestReport.mustRunAfter(test)
    jacocoTestCoverageVerification.mustRunAfter(jacocoTestReport)
}

// 단위 테스트 커버리지 검증
tasks.register('unitTestCoverage', Test) {
    group 'verification'
    description 'Run the unit test and generate coverage report.'
    dependsOn(':unitTest', ':jacocoTestReport', ':jacocoTestCoverageVerification')
    jacocoTestReport.mustRunAfter(unitTest)
    jacocoTestCoverageVerification.mustRunAfter(jacocoTestReport)
}

// 통합 테스트 커버리지 검증
tasks.register('integrationTestCoverage', Test) {
    group 'verification'
    description 'Runs the integration tests with coverage'
    dependsOn(':integrationTest', ':jacocoTestReport', ':jacocoTestCoverageVerification')
    jacocoTestReport.mustRunAfter(integrationTest)
    jacocoTestCoverageVerification.mustRunAfter(jacocoTestReport)
}
